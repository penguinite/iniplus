# This is the "demo" file for iniplus
# It documents what syntax is allowed for implementation reference.

# First off, comments!
# Comments are single-line.
# And can be placed at the beginning (commenting out the rest of the file)
# or at the end of a key-value pair (Aka. inline comments)

a = b # This is a valid comment!

# Comments can also begin with a ";" (semicolon) instead of a hash symbol.
; Hello! I am a comment!
a = b 

# Next up! Sections!
# A section is used to group together a set of options.
# A section usually starts with "[" (open square bracket) and ends with "]" (closed square bracket]
# A backslash can be used if one wishes
# 
# Internally, iniplus only supports a single section level.
# So nesting is not supported, which can be worked around.
[section.A] # Calid
[.] # Valid
[section] # Valid
[] # Technically valid and useful for resetting the scope
[ # Invalid
] # Invalid

# A key-value pair is as simple as "a = b"
# Where the key (before `=`) must be a string and the end is a "value" (ConfigValue)

a = b # Valid
"a" = # Technically valid but not recommended
a = # Invalid
= # Invalid

# Alternative syntax for keyvalue pairs is using a ":" (colon) instead of equal.
a: b # I am the same as "a = b"

# There are no restrictions on if there has to be a space
# before or after the equal/colon symbol.
# Whitespace around the value part will be trimmed off.
a= b
a: b
a=b
a:b
a =b
a :b

# Next up! Different values!
# iniplus is a "typed" config parser which means
# it is meant to figure out which type a value is
# and provide specialized functions for parsing them
# 
# iniplus being "typed" has upsides and downsides
# The upsides being:
#   1. It may lead to an easier-to-use API for new Nim users
#   2. Separating values into types is the whole foundation as 
#      to how we natively support complex datatypes such as arrays
#      and tables
#
# The downside being we need to implement specialised functions...

# First off, strings.
# A string type can be summarized up as "any text"
# A string key usually looks like "a=b"

a = I am a string key! # Valid

# A string key can also look like this
a = "I am a string key!"
# In this case, the quotation marks are removed from the string
# So it simply becomes I am a string key!

# Single quotes are not supported (Well they are, but they won't be trimmed)
a = 'b' # the value is "'b'"
desc = "It's alive!"

# Backslashing is supported...
desc = "Hi \"John\"" # "Hi <SPACE> <QUOTE>John<QUOTE>"
# To enter an actual backslash into a string you'd need to type
# two backslahes
desc = "Hi \\"John\\"" # "Hi <SPACE> <BACKSLASH><QUOTE>John<BACKSLASH><QUOTE>"

# One more interesting thing about strings...
# Three quotes at the start of a string turns a string into a multi-line string.
a: """
Hello World!
I am a string that wraps around multiple lines!
Bye!
"""

# Integers!
#
# An integer is defined as anything that
# contains the digits 0 to 9 alongside minus symbols
# for negative numbers.
#
# The technical details of what is acceptable and what isn't
# doesn't matter here since everything is passed onto parseInt()
# anyway...
num = -10
num = 10000

# Bools!
#
# Has to be either "true", or "false"
# Case-insensitive, spacing-insensitive
b = false
b = true

# Arrays!
# They're a way to group multiple values in only one!
# A square open bracket, the items each one separated with a comma,
# followed by a close square bracket
#
# Cannot hold arrays or other tables inside them, sadly.
employees = [
    "Katie", "John", "Max", "Diana"
]

# Tables!
# An open bracket, and more key-value pairs 
# followed by a closed bracket
#
# Cannot hold arrays or other tables inside them, sadly.
test = {
    "hello": "world"
}

katie = {
    "name": "Katie Doe",
    "role": "CEO",
    "fired": false
}

